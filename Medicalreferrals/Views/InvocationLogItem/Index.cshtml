
@{
    ViewBag.Title = "Դիմում";
}

<div class="for-Toolbar">

    @* Search Panel - Right Slide *@
    <div class="">
        <div class="">
            @*<div class="slidePanel-btn">
            </div>*@
            <div class="create-item">
                <h4>Որոնում</h4>
                <div class="row">
                    <div class="form-group col-md-3 margin-5-0">
                        @(Html.Kendo().ComboBox()
                    .Name("prmId")
                    .Placeholder("Գործարկողներ")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .Filter(FilterType.StartsWith)
                    .BindTo(ViewBag.vbUsers)
                    .HtmlAttributes(new { data_value_primitive = true, @class = "input-item" })
                        )
                    </div>
                    <div class="form-group col-md-3 margin-5-0">
                        @(Html.Kendo().DatePicker()
                                        .Name("prmStartDate")
                                        .HtmlAttributes(new { placeholder = "Փոփոխման իրականացման ա/թ սկիզբ" })
                        )
                    </div>
                    <div class="form-group col-md-3 margin-5-0">
                        @(Html.Kendo().DatePicker()
                                        .Name("prmEndDate")
                                        .HtmlAttributes(new { placeholder = "Փոփոխման իրականացման ա/թ ավարտ" })
                        )
                    </div>
                    <div class="form-group col-md-3 btns align-right">
                        <button type="submit" id="rtSearch" class="k-button" onclick="return Search();"><i class="glyphicon glyphicon-search"></i> Որոնել</button>
                        <button type="submit" class="k-button" onclick="return Clear();"><i class="glyphicon glyphicon-minus"></i> Մաքրել</button>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    function Search() {
        $("#InvocationLogItem").data("kendoGrid").dataSource.read();
        return false;
    }

    function Clear() {
        $("#prmId").data("kendoComboBox").select(-1);
        $("#prmStartDate").val("");
        $("#prmEndDate").val("");        
        $("#InvocationLogItem").data("kendoGrid").dataSource.read();
        return false;
    }

    function getParameter() {
        return {
            userId: $("#prmId").val(),
            startDate: $("#prmStartDate").val(),
            endDate: $("#prmEndDate").val(),
        };
    }
</script>

@(Html.Kendo().Grid<Medicalreferrals.Models.InvocationLogItem>()
      .Name("InvocationLogItem")
            .Columns(columns =>
            {
                columns.Bound(model => model.InvocationLogId).Width(125).Locked(true);
                //columns.Bound(model => model.InvocationId);
                columns.Bound(model => model.FirstName).Width(125);
                columns.Bound(model => model.LastName).Width(125);
                columns.Bound(model => model.PatronymicName).Width(125);
                columns.Bound(model => model.BirthDate).Width(125);
                //columns.Bound(model => model.RegionId);
                columns.Bound(model => model.RegionName).Width(125);
                //columns.Bound(model => model.CommunityId);
                columns.Bound(model => model.CommunityName).Width(125);
                columns.Bound(model => model.Street).Width(125);
                columns.Bound(model => model.Home).Width(125);
                columns.Bound(model => model.Room).Width(125);
                columns.Bound(model => model.ResidentMail).Width(125);
                //columns.Bound(model => model.InvocationPurposeId);
                columns.Bound(model => model.InvocationPurposeName).Width(125);
                //columns.Bound(model => model.OrganizationId);
                columns.Bound(model => model.OrganizationCode).Width(125);
                columns.Bound(model => model.OrganizationName).Width(125);
                //columns.Bound(model => model.InvocationStatusId);
                columns.Bound(model => model.InvocationStatusName).Width(125);
                columns.Bound(model => model.ConformationDate).Width(125);
                columns.Bound(model => model.ConformationUserId).Width(125);
                columns.Bound(model => model.UserName).Width(125);
                columns.Bound(model => model.ConfirmationDate).Width(125);
                columns.Bound(model => model.ConfirmationUserId).Width(125);
                columns.Bound(model => model.InvocationURL).Width(125);
                columns.Bound(model => model.InvocationGuid).Width(125);
                columns.Bound(model => model.InvocationDate).Width(125);
                columns.Bound(model => model.InitiationDate).Width(125);
                //columns.Bound(model => model.InitiationTypeId);
                columns.Bound(model => model.InitiationTypeName).Width(125);
                columns.Bound(model => model.ConformationUserName).Width(125);
                columns.Bound(model => model.LogDate).Lockable(false).Width(125);

            })
      .Selectable(s => s.Mode(GridSelectionMode.Single))
      .Pageable()
      .Groupable()
      .Scrollable()
      .Sortable()
      .Resizable(resize => resize.Columns(true))
      .Reorderable(reorder => reorder.Columns(true))
      .DataSource(dataSource => dataSource
          .Ajax()
          .Read(read => read.Action("ReadInvocationLogItems", "InvocationLogItem").Data("getParameter"))
          .PageSize(15)
          .Sort(sort => sort.Add("LogDate").Descending())
          .Model(model =>
          {
              model.Id(p => p.InvocationLogId);
              model.Field(p => p.LogDate);
          }
          )
)
)

